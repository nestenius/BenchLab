//////////////////////////////////////////////////////////////////////////////////////////////////////////
// PSModel.cs - Generated/Re-generated by [HTENET\qsar] on [4/10/2008 1:59:58 PM]
//////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Runtime.Serialization;

namespace BenchLab.Model
{
    public interface IBenchLabModel<T, TPrimary> : IBenchLabObject, IBenchLabEntity
        where T : IBenchLabObject
        where TPrimary : IBenchLabEntity
    {
        #region Properties
        TPrimary PrimaryEntity { get; set; }
        #endregion

        #region Methods
        void UpdatePrimaryEntity(TPrimary primaryEntity);
        #endregion
    }

    [DataContract(Name="BenchLabModel{0}{1}")]
    public abstract class BenchLabModel<T, TPrimary> : BenchLabObject, IBenchLabModel<T, TPrimary>
        where T : IBenchLabObject
        where TPrimary : IBenchLabEntity, new()
    {
        #region Fields
        [DataMember]
        protected TPrimary _primaryEntity;
        #endregion

        #region Properties
        public virtual TPrimary PrimaryEntity
        {
            get
            {
                if (this._primaryEntity == null)
                    this._primaryEntity = new TPrimary();

                return this._primaryEntity;
            }
            set { this.SetProperty("PrimaryEntity", ref this._primaryEntity, value); }
        }

        public virtual bool HasValidPrimaryEntity
        {
            get
            {
                return ((this._primaryEntity != null) &&
                          (this._primaryEntity.IsValid));
            }
        }
        #endregion

        #region Constructors
        public BenchLabModel() : this(false) { }
        public BenchLabModel(TPrimary primaryEntity)
            : this(false)
        {
            this.PrimaryEntity = primaryEntity;
        }
        public BenchLabModel(bool propertyChangeEventDisabled) : base(propertyChangeEventDisabled) { }
        #endregion

        #region IPSEntity Members
        public virtual int? PSRid
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.ID;
                else
                    return null;
            }
            set
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.ID = value;
            }
        }

        public int? ID { get; set; }

        public virtual DateTime LastChangeDateTime
        {
            get { return this.LastChangeDateTimeUTC.ToLocalTime(); }
        }
        public virtual DateTime LastChangeDateTimeUTC
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.LastChangeDateTimeUTC;
                else
                    return DateTime.UtcNow;
            }
            set
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.LastChangeDateTimeUTC = value;
            }
        }
        public virtual string LastChangeUser
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.LastChangeUser;
                else
                    return String.Empty;
            }
            set
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.LastChangeUser = value;
            }
        }
        public virtual DateTime CreationDateTime
        {
            get { return this.CreationDateTimeUTC.ToLocalTime(); }
        }
        public virtual DateTime CreationDateTimeUTC
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.CreationDateTimeUTC;
                else
                    return DateTime.UtcNow;
            }
            set
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.CreationDateTimeUTC = value;
            }
        }
        public virtual string CreationUser
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.CreationUser;
                else
                    return String.Empty;
            }
            set
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.CreationUser = value;
            }
        }
        public virtual Status Status
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.Status;
                else
                    return Status.Active;
            }
            set
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.Status = value;
            }
        }
        public virtual bool BeingUsed
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.BeingUsed;
                else
                    return false;
            }
            set
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.BeingUsed = value;
            }
        }
        public virtual string PopupData
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.PopupData;
                else
                    return String.Empty;
            }
            set
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.PopupData = value;
            }
        }
        public virtual string PopupText
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.PopupText;
                else
                    return this.ToString();
            }
        }

        public virtual bool IsPendingAdd
        {
            get
            {
                return ((this.DirtyState == DirtyState.PendingAddChange) &&
                        (!this.IsValid));
            }
        }
        public virtual bool IsPendingDelete
        {
            get { return (this.DirtyState == DirtyState.PendingDelete); }
        }
        public override DirtyState DirtyState
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.DirtyState;
                else
                    return DirtyState.UnChanged;
            }
            set
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.DirtyState = value;
            }
        }
        public virtual bool IsValid
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.IsValid;
                else
                    return false;
            }
        }
        public override bool IsDirty
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.IsDirty;
                else
                    return false;
            }
        }
        
        public virtual AccessType AccessType
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.AccessType;
                else
                    return AccessType.Default;
            }
            set
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.AccessType = value;
                this.NotifyPropertyChanged("IsReadOnly");
                this.NotifyPropertyChanged("IsEditable");
            }
        }
        public virtual bool IsEditable
        {
            get { return !this.IsReadOnly; }
        }
        public virtual bool IsReadOnly
        {
            get
            {
                if (this.PrimaryEntity != null)
                    return this.PrimaryEntity.IsReadOnly;
                return false;
            }
        }

        public override void MakeClean()
        {
            if (this.PrimaryEntity != null)
                this.PrimaryEntity.MakeClean();
        }
        public virtual void PopulateObjectCommonData<Target>(Target targetObject)
            where Target : IBenchLabEntity
        {
            IBenchLabModel<T, TPrimary> model = targetObject as IBenchLabModel<T, TPrimary>;
            if (model != null)
            {
                if (this.PrimaryEntity != null)
                    this.PrimaryEntity.PopulateObjectCommonData(model.PrimaryEntity);
            }
        }
        public T CreateModel<T, TPrimary>()
            where T : IBenchLabModel<T, TPrimary>, new()
            where TPrimary : IBenchLabEntity
        {
            T result = default(T);

            if (this.PrimaryEntity != null)
            {
                result = this.PrimaryEntity.CreateModel<T, TPrimary>();
            }
            else
            {
                // All T (e.g. CommonPersonModel) must have valid constructor (TPrimary primaryEntity) as Activator expectation            
                result = (T)Activator.CreateInstance(typeof(T), new object[] { this });
            }

            return result;
        }
        public virtual void SetToNew()
        {
            this.PSRid = null;      // Set against the prop so notification can happen (if apply)
            this.DirtyState = DirtyState.PendingAddChange;
        }        
        public IBenchLabEntity TrimToPSRid()
        {
            BenchLabModel<T, TPrimary> result = Activator.CreateInstance<BenchLabModel<T, TPrimary>>();
            result.PropertyChangeEventDisabled = true;

            if (this.PrimaryEntity != null)
                result.PrimaryEntity = (TPrimary)this.PrimaryEntity.TrimToPSRid();

            result.PropertyChangeEventDisabled = this.PropertyChangeEventDisabled;

            return (IBenchLabEntity)result;
        }
        #endregion

        #region Overrides
        public virtual T CreateAClone()
        {
            return this.CreateAClone<T>();
        }
        public override bool Equals(object obj)
        {
            if (obj == null || obj is T)
                return this.Equals((T)obj);
            else
                return false;
        }
        public virtual bool Equals(T obj)
        {
            bool isEqual = false;

            if (obj != null)
                isEqual = (obj.GetHashCode() == this.GetHashCode());
            else
                isEqual = (!this.IsValid && !this.IsDirty);

            return isEqual;
        }
        public override int GetHashCode()
        {
            if (this.PSRid.HasValue)
                return this.PSRid.Value;
            else
                return base.GetHashCode();
        }

        protected override bool SetProperty<PT>(string propertyName, ref PT propertyField, PT newValue)
        {
            // Make the actually property change now
            PT oldValue = propertyField;
            propertyField = newValue;

            bool valuesDifferent = !Object.Equals(oldValue, newValue);

            // Call any additional OnPropertyChanged Listeners now
            if (valuesDifferent)
                this.OnPropertyChanged(propertyName, oldValue, propertyField);

            return valuesDifferent;
        }
        #endregion

        #region Public Methods
        public virtual void UpdatePrimaryEntity(TPrimary primaryEntity)
        {
            this.UpdatePrimaryEntity(primaryEntity, true);
        }
        public virtual void UpdatePrimaryEntity(TPrimary primaryEntity, bool retainDirtyState)
        {
            DirtyState currentDirtyState = this.DirtyState;

            this.PrimaryEntity = primaryEntity;
            if (retainDirtyState)
                this.DirtyState = currentDirtyState;
        }
        #endregion

        
    }
}
